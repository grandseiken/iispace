#ifndef II_GAME_IO_SDL_CONVERT_H
#define II_GAME_IO_SDL_CONVERT_H
#include "game/io/input.h"
#include <SDL_gamecontroller.h>
#include <SDL_keyboard.h>
#include <SDL_mouse.h>
#include <cstdint>
#include <optional>

namespace ii::io {

inline std::optional<controller::axis> convert_sdl_controller_axis(std::uint8_t axis) {
  switch (axis) {
  case SDL_CONTROLLER_AXIS_LEFTX:
    return controller::axis::kLX;
  case SDL_CONTROLLER_AXIS_LEFTY:
    return controller::axis::kLY;
  case SDL_CONTROLLER_AXIS_RIGHTX:
    return controller::axis::kRX;
  case SDL_CONTROLLER_AXIS_RIGHTY:
    return controller::axis::kRY;
  case SDL_CONTROLLER_AXIS_TRIGGERLEFT:
    return controller::axis::kLT;
  case SDL_CONTROLLER_AXIS_TRIGGERRIGHT:
    return controller::axis::kRT;
  default:
    return std::nullopt;
  }
}

inline std::optional<controller::button> convert_sdl_controller_button(std::uint8_t button) {
  switch (button) {
  case SDL_CONTROLLER_BUTTON_A:
    return controller::button::kA;
  case SDL_CONTROLLER_BUTTON_B:
    return controller::button::kB;
  case SDL_CONTROLLER_BUTTON_X:
    return controller::button::kX;
  case SDL_CONTROLLER_BUTTON_Y:
    return controller::button::kY;
  case SDL_CONTROLLER_BUTTON_BACK:
    return controller::button::kBack;
  case SDL_CONTROLLER_BUTTON_GUIDE:
    return controller::button::kGuide;
  case SDL_CONTROLLER_BUTTON_START:
    return controller::button::kStart;
  case SDL_CONTROLLER_BUTTON_LEFTSTICK:
    return controller::button::kLStick;
  case SDL_CONTROLLER_BUTTON_RIGHTSTICK:
    return controller::button::kRStick;
  case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
    return controller::button::kLShoulder;
  case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
    return controller::button::kRShoulder;
  case SDL_CONTROLLER_BUTTON_DPAD_UP:
    return controller::button::kDpadUp;
  case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
    return controller::button::kDpadDown;
  case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
    return controller::button::kDpadLeft;
  case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
    return controller::button::kDpadRight;
  case SDL_CONTROLLER_BUTTON_MISC1:
    return controller::button::kMisc1;
  case SDL_CONTROLLER_BUTTON_PADDLE1:
    return controller::button::kPaddle1;
  case SDL_CONTROLLER_BUTTON_PADDLE2:
    return controller::button::kPaddle2;
  case SDL_CONTROLLER_BUTTON_PADDLE3:
    return controller::button::kPaddle3;
  case SDL_CONTROLLER_BUTTON_PADDLE4:
    return controller::button::kPaddle4;
  case SDL_CONTROLLER_BUTTON_TOUCHPAD:
    return controller::button::kTouchpad;
  default:
    return std::nullopt;
  }
}

inline std::optional<keyboard::key> convert_sdl_key(SDL_Keycode key) {
  switch (key) {
  case SDLK_0:
    return keyboard::key::k0;
  case SDLK_1:
    return keyboard::key::k1;
  case SDLK_2:
    return keyboard::key::k2;
  case SDLK_3:
    return keyboard::key::k3;
  case SDLK_4:
    return keyboard::key::k4;
  case SDLK_5:
    return keyboard::key::k5;
  case SDLK_6:
    return keyboard::key::k6;
  case SDLK_7:
    return keyboard::key::k7;
  case SDLK_8:
    return keyboard::key::k8;
  case SDLK_9:
    return keyboard::key::k9;
  case SDLK_a:
    return keyboard::key::kA;
  case SDLK_b:
    return keyboard::key::kB;
  case SDLK_c:
    return keyboard::key::kC;
  case SDLK_d:
    return keyboard::key::kD;
  case SDLK_e:
    return keyboard::key::kE;
  case SDLK_f:
    return keyboard::key::kF;
  case SDLK_g:
    return keyboard::key::kG;
  case SDLK_h:
    return keyboard::key::kH;
  case SDLK_i:
    return keyboard::key::kI;
  case SDLK_j:
    return keyboard::key::kJ;
  case SDLK_k:
    return keyboard::key::kK;
  case SDLK_l:
    return keyboard::key::kL;
  case SDLK_m:
    return keyboard::key::kM;
  case SDLK_n:
    return keyboard::key::kN;
  case SDLK_o:
    return keyboard::key::kO;
  case SDLK_p:
    return keyboard::key::kP;
  case SDLK_q:
    return keyboard::key::kQ;
  case SDLK_r:
    return keyboard::key::kR;
  case SDLK_s:
    return keyboard::key::kS;
  case SDLK_t:
    return keyboard::key::kT;
  case SDLK_u:
    return keyboard::key::kU;
  case SDLK_v:
    return keyboard::key::kV;
  case SDLK_w:
    return keyboard::key::kW;
  case SDLK_x:
    return keyboard::key::kX;
  case SDLK_y:
    return keyboard::key::kY;
  case SDLK_z:
    return keyboard::key::kZ;
  case SDLK_F1:
    return keyboard::key::kF1;
  case SDLK_F2:
    return keyboard::key::kF2;
  case SDLK_F3:
    return keyboard::key::kF3;
  case SDLK_F4:
    return keyboard::key::kF4;
  case SDLK_F5:
    return keyboard::key::kF5;
  case SDLK_F6:
    return keyboard::key::kF6;
  case SDLK_F7:
    return keyboard::key::kF7;
  case SDLK_F8:
    return keyboard::key::kF8;
  case SDLK_F9:
    return keyboard::key::kF9;
  case SDLK_F10:
    return keyboard::key::kF10;
  case SDLK_F11:
    return keyboard::key::kF11;
  case SDLK_F12:
    return keyboard::key::kF12;
  case SDLK_F13:
    return keyboard::key::kF13;
  case SDLK_F14:
    return keyboard::key::kF14;
  case SDLK_F15:
    return keyboard::key::kF15;
  case SDLK_F16:
    return keyboard::key::kF16;
  case SDLK_F17:
    return keyboard::key::kF17;
  case SDLK_F18:
    return keyboard::key::kF18;
  case SDLK_F19:
    return keyboard::key::kF19;
  case SDLK_F20:
    return keyboard::key::kF20;
  case SDLK_F21:
    return keyboard::key::kF21;
  case SDLK_F22:
    return keyboard::key::kF22;
  case SDLK_F23:
    return keyboard::key::kF23;
  case SDLK_F24:
    return keyboard::key::kF24;
  case SDLK_ESCAPE:
    return keyboard::key::kEscape;
  case SDLK_TAB:
    return keyboard::key::kTab;
  case SDLK_CAPSLOCK:
    return keyboard::key::kCapslock;
  case SDLK_BACKSPACE:
    return keyboard::key::kBackspace;
  case SDLK_SPACE:
    return keyboard::key::kSpacebar;
  case SDLK_RETURN:
    return keyboard::key::kReturn;
  case SDLK_LSHIFT:
    return keyboard::key::kLShift;
  case SDLK_RSHIFT:
    return keyboard::key::kRShift;
  case SDLK_LALT:
    return keyboard::key::kLAlt;
  case SDLK_RALT:
    return keyboard::key::kRAlt;
  case SDLK_LCTRL:
    return keyboard::key::kLCtrl;
  case SDLK_RCTRL:
    return keyboard::key::kRCtrl;
  case SDLK_LGUI:
    return keyboard::key::kLSuper;
  case SDLK_RGUI:
    return keyboard::key::kRSuper;
  case SDLK_LEFT:
    return keyboard::key::kLArrow;
  case SDLK_RIGHT:
    return keyboard::key::kRArrow;
  case SDLK_UP:
    return keyboard::key::kUArrow;
  case SDLK_DOWN:
    return keyboard::key::kDArrow;
  case SDLK_BACKQUOTE:
    return keyboard::key::kGrave;
  case SDLK_BACKSLASH:
    return keyboard::key::kBackslash;
  case SDLK_COMMA:
    return keyboard::key::kComma;
  case SDLK_QUOTE:
    return keyboard::key::kQuote;
  case SDLK_SLASH:
    return keyboard::key::kSlash;
  case SDLK_MINUS:
    return keyboard::key::kMinus;
  case SDLK_SEMICOLON:
    return keyboard::key::kSemicolon;
  case SDLK_PERIOD:
    return keyboard::key::kPeriod;
  case SDLK_LEFTBRACKET:
    return keyboard::key::kLBracket;
  case SDLK_RIGHTBRACKET:
    return keyboard::key::kRBracket;
  case SDLK_LEFTPAREN:
    return keyboard::key::kLParen;
  case SDLK_RIGHTPAREN:
    return keyboard::key::kRParen;
  case SDLK_EQUALS:
    return keyboard::key::kEquals;
  case SDLK_LESS:
    return keyboard::key::kLess;
  case SDLK_GREATER:
    return keyboard::key::kGreater;
  case SDLK_AMPERSAND:
    return keyboard::key::kAmpersand;
  case SDLK_ASTERISK:
    return keyboard::key::kAsterisk;
  case SDLK_AT:
    return keyboard::key::kAt;
  case SDLK_CARET:
    return keyboard::key::kCaret;
  case SDLK_COLON:
    return keyboard::key::kColon;
  case SDLK_DOLLAR:
    return keyboard::key::kDollar;
  case SDLK_HASH:
    return keyboard::key::kHash;
  case SDLK_EXCLAIM:
    return keyboard::key::kExclamation;
  case SDLK_PERCENT:
    return keyboard::key::kPercent;
  case SDLK_PLUS:
    return keyboard::key::kPlus;
  case SDLK_QUESTION:
    return keyboard::key::kQuestion;
  case SDLK_QUOTEDBL:
    return keyboard::key::kDoubleQuote;
  case SDLK_UNDERSCORE:
    return keyboard::key::kUnderscore;
  case SDLK_HOME:
    return keyboard::key::kHome;
  case SDLK_END:
    return keyboard::key::kEnd;
  case SDLK_DELETE:
    return keyboard::key::kDelete;
  case SDLK_INSERT:
    return keyboard::key::kInsert;
  case SDLK_PAGEDOWN:
    return keyboard::key::kPageDown;
  case SDLK_PAGEUP:
    return keyboard::key::kPageUp;
  case SDLK_PRINTSCREEN:
    return keyboard::key::kPrintScreen;
  case SDLK_PAUSE:
    return keyboard::key::kPauseBreak;
  case SDLK_SCROLLLOCK:
    return keyboard::key::kScrollLock;
  case SDLK_NUMLOCKCLEAR:
    return keyboard::key::kNumlock;
  case SDLK_KP_0:
    return keyboard::key::kKeypad0;
  case SDLK_KP_1:
    return keyboard::key::kKeypad1;
  case SDLK_KP_2:
    return keyboard::key::kKeypad2;
  case SDLK_KP_3:
    return keyboard::key::kKeypad3;
  case SDLK_KP_4:
    return keyboard::key::kKeypad4;
  case SDLK_KP_5:
    return keyboard::key::kKeypad5;
  case SDLK_KP_6:
    return keyboard::key::kKeypad6;
  case SDLK_KP_7:
    return keyboard::key::kKeypad7;
  case SDLK_KP_8:
    return keyboard::key::kKeypad8;
  case SDLK_KP_9:
    return keyboard::key::kKeypad9;
  case SDLK_KP_ENTER:
    return keyboard::key::kKeypadEnter;
  case SDLK_KP_PERIOD:
    return keyboard::key::kKeypadPeriod;
  case SDLK_KP_PLUS:
    return keyboard::key::kKeypadPlus;
  case SDLK_KP_MINUS:
    return keyboard::key::kKeypadMinus;
  case SDLK_KP_MULTIPLY:
    return keyboard::key::kKeypadMultiply;
  case SDLK_KP_DIVIDE:
    return keyboard::key::kKeypadDivide;
  default:
    return std::nullopt;
  }
}

inline std::optional<mouse::button> convert_sdl_mouse_button(std::uint8_t button) {
  switch (button) {
  case SDL_BUTTON_LEFT:
    return mouse::button::kL;
  case SDL_BUTTON_MIDDLE:
    return mouse::button::kM;
  case SDL_BUTTON_RIGHT:
    return mouse::button::kR;
  case SDL_BUTTON_X1:
    return mouse::button::kX1;
  case SDL_BUTTON_X2:
    return mouse::button::kX2;
  default:
    return std::nullopt;
  }
}

}  // namespace ii::io

#endif